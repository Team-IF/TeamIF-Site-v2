{"version":3,"sources":["assets/background.jpg","assets/recruit_background.jpg","serviceWorker.ts","components/NavigationBar/NavTitle.tsx","components/NavigationBar/NavItem.tsx","utils/ScreenSize/index.tsx","atomics/NoStyleLink/index.tsx","components/NavigationBar/index.tsx","components/App.tsx","atomics/Button/index.tsx","atomics/Typography/Heading.tsx","utils/AlignContainer/index.tsx","components/Sections/About/index.tsx","components/ProjectCard/index.tsx","components/Sections/Project/index.tsx","components/MemberCard/index.tsx","components/Sections/Member/index.tsx","pages/Home.tsx","components/Sections/RecruitAbout/index.tsx","components/RecruitForm/RecruitFormHeader.tsx","atomics/Form/index.tsx","pages/Recruit.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TitleStyle","styled","p","NavTitle","children","ItemStyle","NavItem","SCREEN_SIZE","TABLET","MOBILE","NoStyleLink","Link","NavContainer","nav","NavItemListStyle","div","NavigationBar","to","App","Button","button","Heading1","Heading2","AlignContainer","Container","section","background","SubTitleStyle","ButtonStyle","About","id","Card","CardTitle","h1","ProjectCard","title","github","href","target","rel","icon","faGithub","CardList","Project","ProjectData","map","project","key","name","description","Wrapper","props","color","MemberCard","email","nickname","src","md5","alt","MemberList","Member","MemberData","member","Home","StyledHeading","RecruitAbout","TipText","RecruitFormHeader","Label","label","Input","input","TextArea","textarea","Form","InputWrapper","StyledButton","Recruit","htmlFor","type","placeholder","ReactDOM","render","StrictMode","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a21f6fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.fec08179.jpg\";","module.exports = __webpack_public_path__ + \"static/media/recruit_background.c998e009.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst TitleStyle = styled.p`\n  font-weight: 600;\n  font-size: 2rem;\n  font-family: 'Fira Sans', sans-serif;\n\n  color: var(--color-teamif);\n\n  background-size: 0% 100%;\n  background-repeat: no-repeat;\n  transition: background-size 0.2s ease-in;\n  background-image: linear-gradient(transparent 80%, #000 20%);\n\n  cursor: pointer;\n\n  &:hover {\n    background-size: 100% 100%;\n  }\n`\n\nconst NavTitle: React.FC = ({ children }) => {\n  return <TitleStyle>{children}</TitleStyle>\n}\n\nexport default NavTitle\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst ItemStyle = styled.p`\n  display: flex;\n  align-self: center;\n  font-weight: bold;\n  font-size: 1.3rem;\n\n  color: black;\n\n  background-size: 0 100%;\n  background-repeat: no-repeat;\n  transition: background-size 0.2s ease-in;\n  background-image: linear-gradient(transparent 80%, var(--color-teamif) 20%);\n\n  margin: 0 2rem;\n  cursor: pointer;\n\n  &:hover {\n    background-size: 100% 100%;\n  }\n`\n\nconst NavItem: React.FC = ({ children }) => {\n  return <ItemStyle>{children}</ItemStyle>\n}\n\nexport default NavItem\n","const SCREEN_SIZE = {\n  TABLET: '900px',\n  MOBILE: '480px'\n}\n\nexport default SCREEN_SIZE\n","import styled from 'styled-components'\nimport { Link } from 'react-router-dom'\n\nconst NoStyleLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n`\n\nexport default NoStyleLink\n","import React from 'react'\nimport styled from 'styled-components'\nimport NavTitle from './NavTitle'\nimport NavItem from './NavItem'\nimport SCREEN_SIZE from '../../utils/ScreenSize'\nimport NoStyleLink from '../../atomics/NoStyleLink'\n\nconst NavContainer = styled.nav`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n\n  width: 75vw;\n  margin: 1rem auto;\n\n  @media screen and (max-width: ${SCREEN_SIZE.TABLET}) {\n    justify-content: center;\n    align-items: center;\n  }\n`\n\nconst NavItemListStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n\n  @media screen and (max-width: ${SCREEN_SIZE.TABLET}) {\n    display: none;\n  }\n`\n\nconst NavigationBar: React.FC = () => {\n  return (\n    <NavContainer>\n      <NavTitle>\n        <NoStyleLink to='/'>TeamIF</NoStyleLink>\n      </NavTitle>\n\n      <NavItemListStyle>\n        <NavItem>\n          <NoStyleLink to='/'>Home</NoStyleLink>\n        </NavItem>\n        <NavItem>\n          <NoStyleLink to='/recruit'>Recruit</NoStyleLink>\n        </NavItem>\n      </NavItemListStyle>\n    </NavContainer>\n  )\n}\n\nexport default NavigationBar\n","import React from 'react'\nimport NavigationBar from '../components/NavigationBar'\n\nconst App: React.FC = ({ children }) => {\n  return (\n    <>\n      <NavigationBar />\n      {children}\n    </>\n  )\n}\n\nexport default App\n","import styled from 'styled-components'\n\nconst Button = styled.button`\n  margin-top: 2rem;\n  border: none;\n\n  background-color: #333333;\n  color: white;\n\n  width: 100px;\n  height: 40px;\n  border-radius: 50px;\n\n  cursor: pointer;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: var(--color-teamif);\n    color: white;\n  }\n`\n\nexport default Button\n","import styled from 'styled-components'\nimport SCREEN_SIZE from '../../utils/ScreenSize'\n\nexport const Heading1 = styled.p`\n  font-size: 2rem;\n  font-weight: bold;\n\n  @media screen and (max-width: ${SCREEN_SIZE.MOBILE}) {\n    font-size: 1.6rem;\n  }\n`\nexport const Heading2 = styled.p`\n  font-size: 1.5rem;\n  font-weight: bold;\n\n  @media screen and (max-width: ${SCREEN_SIZE.MOBILE}) {\n    font-size: 1.6rem;\n  }\n`\n","import styled from 'styled-components'\n\nconst AlignContainer = styled.div`\n  padding: 0 1.2rem;\n\n  width: 1500px;\n  margin: 0 auto;\n`\n\nexport default AlignContainer\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport Button from '../../../atomics/Button'\nimport { Heading1 } from '../../../atomics/Typography/Heading'\nimport AlignContainer from '../../../utils/AlignContainer'\n\nimport background from '../../../assets/background.jpg'\n\nconst Container = styled.section`\n  height: 26rem;\n\n  background-image: url(${background});\n  background-size: cover;\n\n  display: flex;\n  align-items: center;\n\n  color: white;\n`\n\nconst SubTitleStyle = styled.p`\n  font-size: 1.3rem;\n`\n\nconst ButtonStyle = styled(Button)`\n  background-color: white;\n  color: black;\n`\n\nconst About: React.FC = () => {\n  return (\n    <Container id='about'>\n      <AlignContainer>\n        <Heading1>We Make IF to Reality, Dream to Action.</Heading1>\n        <SubTitleStyle>청소년 프로그래머 팀, TeamIF</SubTitleStyle>\n\n        <ButtonStyle>\n          <Link to='/recruit'>지원하기</Link>\n        </ButtonStyle>\n      </AlignContainer>\n    </Container>\n  )\n}\n\nexport default About\n","import React from 'react'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport Button from '../../atomics/Button'\nimport SCREEN_SIZE from '../../utils/ScreenSize'\n\nconst Card = styled.div`\n  border: 1px solid #eaeaea;\n  border-radius: 20px;\n  box-shadow: 0 0 30px rgba(169, 169, 169, 0.2);\n\n  padding: 1.5rem;\n\n  display: grid;\n  grid-template-rows: auto 80px;\n`\n\nconst CardTitle = styled.h1`\n  font-size: 1.5rem;\n  font-weight: bold;\n\n  @media screen and (max-width: ${SCREEN_SIZE.MOBILE}) {\n    font-size: 1.3rem;\n  }\n`\n\ninterface ProjectCardProps {\n  readonly title: string\n  readonly github: string\n}\n\nconst ProjectCard: React.FC<ProjectCardProps> = ({\n  title,\n  github,\n  children\n}) => {\n  return (\n    <Card>\n      <div>\n        <CardTitle>{title}</CardTitle>\n        <p>{children}</p>\n      </div>\n      <div>\n        <a href={github} target='_blank' rel='noopener noreferrer'>\n          <Button>\n            <FontAwesomeIcon icon={faGithub} /> GitHub\n          </Button>\n        </a>\n      </div>\n    </Card>\n  )\n}\n\nexport default ProjectCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading1 } from '../../../atomics/Typography/Heading'\nimport AlignContainer from '../../../utils/AlignContainer'\nimport ProjectCard from '../../ProjectCard'\nimport ProjectData from '../../../data/project.data.json'\n\nconst Container = styled.section`\n  display: flex;\n  align-items: center;\n`\n\nconst TitleStyle = styled(Heading1)`\n  margin: 2rem 0;\n`\n\nconst CardList = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-gap: 40px;\n`\n\nconst Project: React.FC = () => {\n  return (\n    <Container id='project'>\n      <AlignContainer>\n        <TitleStyle>Project.</TitleStyle>\n\n        <CardList>\n          {ProjectData.map((project) => (\n            <ProjectCard\n              key={project.name}\n              title={project.name}\n              github={project.github}>\n              {project.description}\n            </ProjectCard>\n          ))}\n        </CardList>\n      </AlignContainer>\n    </Container>\n  )\n}\n\nexport default Project\n","import React from 'react'\nimport styled from 'styled-components'\nimport md5 from 'md5'\n\nconst Wrapper = styled.div`\n  flex: 0 1;\n  margin-bottom: 10px;\n  margin-right: 10px;\n\n  &:last-child {\n    margin-right: 0;\n  }\n`\n\nconst Card = styled.div<{ color: string }>`\n  display: flex;\n  flex-direction: row;\n\n  background-color: ${(props) => props.color};\n  color: white;\n\n  line-height: 40px;\n\n  border-radius: 20px;\n\n  & > img {\n    width: 40px;\n    height: 40px;\n    border-radius: 20px;\n  }\n\n  & > p {\n    padding-left: 0.5rem;\n    padding-right: 1rem;\n    font-size: 12px;\n  }\n\n  &:hover {\n    cursor: pointer;\n    text-decoration: underline;\n  }\n`\n\ninterface MemberCardProps {\n  readonly email: string\n  readonly nickname: string\n  readonly color: string\n  readonly github: string\n}\n\nconst MemberCard: React.FC<MemberCardProps> = ({\n  email,\n  nickname,\n  color,\n  github\n}) => {\n  return (\n    <Wrapper>\n      <a href={github} target='_blank' rel='noopener noreferrer'>\n        <Card color={color}>\n          <img\n            src={`https://www.gravatar.com/avatar/${md5(\n              email\n            )}?s=1024&d=https%3A%2F%2Fteamif%2Eio%2Fdefault_profile%2Epng`}\n            alt='profile'\n          />\n          <p>{nickname}</p>\n        </Card>\n      </a>\n    </Wrapper>\n  )\n}\n\nexport default MemberCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading1 } from '../../../atomics/Typography/Heading'\nimport AlignContainer from '../../../utils/AlignContainer'\nimport MemberCard from '../../MemberCard'\n\nimport MemberData from '../../../data/member.data.json'\n\nconst Container = styled.section`\n  display: flex;\n  align-items: center;\n`\n\nconst TitleStyle = styled(Heading1)`\n  margin: 2rem 0;\n`\n\nconst MemberList = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`\n\nconst Member: React.FC = () => {\n  return (\n    <Container id='member'>\n      <AlignContainer>\n        <TitleStyle>Member.</TitleStyle>\n        <MemberList>\n          {MemberData.map((member) => (\n            <MemberCard\n              key={member.nickname}\n              email={member.email}\n              nickname={member.nickname}\n              color={member.color}\n              github={member.github}\n            />\n          ))}\n        </MemberList>\n      </AlignContainer>\n    </Container>\n  )\n}\n\nexport default Member\n","import React from 'react'\nimport About from '../components/Sections/About'\nimport Project from '../components/Sections/Project'\nimport Member from '../components/Sections/Member'\n\nconst Home: React.FC = () => {\n  return (\n    <>\n      <About />\n      <Project />\n      <Member />\n    </>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading1 } from '../../../atomics/Typography/Heading'\nimport AlignContainer from '../../../utils/AlignContainer'\n\nimport background from '../../../assets/recruit_background.jpg'\n\nconst Container = styled.section`\n  height: 26rem;\n\n  background-image: url(${background});\n  background-size: cover;\n\n  background-position-y: 10%;\n\n  display: flex;\n  align-items: center;\n\n  text-align: center;\n`\n\nconst StyledHeading = styled(Heading1)`\n  color: black;\n  opacity: 0.8;\n`\n\nconst RecruitAbout: React.FC = () => {\n  return (\n    <Container>\n      <AlignContainer>\n        <StyledHeading>\n          TeamIF와 함께할\n          <br />\n          청소년 팀원을 모집합니다\n        </StyledHeading>\n      </AlignContainer>\n    </Container>\n  )\n}\n\nexport default RecruitAbout\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading2 } from '../../atomics/Typography/Heading'\n\nconst TipText = styled.p`\n  color: var(--color-tip);\n  font-size: 14px;\n\n  margin: 0 10px 2rem 10px;\n`\n\nconst RecruitFormHeader = () => {\n  return (\n    <div>\n      <Heading2>신청하기</Heading2>\n      <TipText>\n        디스코드는 닉네임#태그 형태가 아닌 숫자로 이루어진 ID를 입력해주세요.\n      </TipText>\n    </div>\n  )\n}\n\nexport default RecruitFormHeader\n","import styled from 'styled-components'\n\nexport const Label = styled.label`\n  color: var(--color-tip);\n  font-size: 12px;\n`\n\nexport const Input = styled.input`\n  width: 350px;\n  height: 36px;\n\n  border: 1px solid #bdc3c7;\n  border-radius: 3px;\n\n  padding-left: 0.5rem;\n\n  font-size: 12px;\n`\n\nexport const TextArea = styled.textarea`\n  width: 350px;\n  height: 200px;\n\n  border: 1px solid #bdc3c7;\n  border-radius: 3px;\n\n  padding-left: 0.5rem;\n\n  font-size: 12px;\n  font-family: 'Noto Sans KR', sans-serif;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport RecruitAbout from '../components/Sections/RecruitAbout'\nimport RecruitFormHeader from '../components/RecruitForm/RecruitFormHeader'\nimport Button from '../atomics/Button'\nimport { Input, Label, TextArea } from '../atomics/Form'\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  text-align: center;\n\n  margin: 2rem 0;\n`\n\nconst Form = styled.div`\n  display: flex;\n  justify-content: center;\n\n  & input,\n  textarea {\n    display: block;\n  }\n\n  & label {\n    text-align: left;\n  }\n`\n\nconst InputWrapper = styled.div`\n  margin-bottom: 1rem;\n`\n\nconst StyledButton = styled(Button)`\n  margin-top: 1rem;\n`\n\nconst Recruit: React.FC = () => {\n  return (\n    <>\n      <RecruitAbout />\n\n      <Container>\n        <div>\n          <RecruitFormHeader />\n\n          <Form>\n            <div>\n              <InputWrapper>\n                <Label htmlFor='discord'>디스코드 ID</Label>\n                <Input id='discord' type='number' placeholder='디스코드 ID' />\n              </InputWrapper>\n\n              <InputWrapper>\n                <Label htmlFor='email'>이메일</Label>\n                <Input\n                  id='email'\n                  type='email'\n                  placeholder='결과를 받을 이메일'\n                />\n              </InputWrapper>\n\n              <InputWrapper>\n                <Label htmlFor='github'>GitHub ID</Label>\n                <Input id='github' type='text' placeholder='GitHub ID' />\n              </InputWrapper>\n\n              <InputWrapper>\n                <Label htmlFor='age'>나이</Label>\n                <Input id='age' type='number' placeholder='나이' />\n              </InputWrapper>\n\n              <InputWrapper>\n                <Label htmlFor='comment'>자기소개</Label>\n                <TextArea\n                  id='comment'\n                  placeholder='자기소개, 다짐 등 하고 싶은 말을 적어주세요.'\n                />\n              </InputWrapper>\n            </div>\n          </Form>\n\n          <StyledButton>제출</StyledButton>\n        </div>\n      </Container>\n    </>\n  )\n}\n\nexport default Recruit\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker'\nimport App from './components/App'\nimport Home from './pages/Home'\nimport Recruit from './pages/Recruit'\n\nimport './styles/global.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App>\n        <Route exact path='/' component={Home} />\n        <Route exact path='/recruit' component={Recruit} />\n      </App>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}