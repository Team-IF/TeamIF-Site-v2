{"version":3,"sources":["serviceWorker.ts","components/NavigationBar/NavTitle.tsx","components/NavigationBar/NavItem.tsx","components/NavigationBar/index.tsx","atomics/Button/index.tsx","atomics/Typography/Heading.tsx","utils/AlignContainer/index.tsx","components/Sections/About/index.tsx","views/Home.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TitleStyle","styled","p","NavTitle","children","ItemStyle","NavItem","NavContainer","nav","NavItemListStyle","div","NavigationBar","href","Button","button","Heading1","AlignContainer","Container","section","SubTitleStyle","About","id","Home","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,+ZCfN,IAAMC,EAAaC,IAAOC,EAAV,KAsBDC,EAJY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5B,OAAO,kBAACJ,EAAD,KAAaI,I,ycCnBtB,IAAMC,EAAYJ,IAAOC,EAAV,KAyBAI,EAJW,SAAC,GAAkB,IAAhBF,EAAe,EAAfA,SAC3B,OAAO,kBAACC,EAAD,KAAYD,I,6SCpBrB,IAAMG,EAAeN,IAAOO,IAAV,KASZC,EAAmBR,IAAOS,IAAV,KA8BPC,EAzBiB,WAC9B,OACE,kBAACJ,EAAD,KACE,kBAAC,EAAD,KACE,uBAAGK,KAAK,KAAR,WAGF,kBAACH,EAAD,KACE,kBAAC,EAAD,KACE,uBAAGG,KAAK,UAAR,UAEF,kBAAC,EAAD,KACE,uBAAGA,KAAK,YAAR,YAEF,kBAAC,EAAD,KACE,uBAAGA,KAAK,WAAR,WAEF,kBAAC,EAAD,KACE,uBAAGA,KAAK,YAAR,e,qXCnCV,IAoBeC,EApBAZ,IAAOa,OAAV,K,iHCCL,IAAMC,EAAWd,IAAOC,EAAV,K,4GCDrB,IAKec,EALQf,IAAOS,IAAV,K,gQCIpB,IAAMO,EAAYhB,IAAOiB,QAAV,KAQTC,EAAgBlB,IAAOC,EAAV,KAiBJkB,EAbS,WACtB,OACE,kBAACH,EAAD,CAAWI,GAAG,SACZ,kBAAC,EAAD,KACE,kBAACN,EAAD,gDACA,kBAACI,EAAD,yEAEA,kBAAC,EAAD,oCCZOG,EATQ,WACrB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,MCDNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,STgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2cbe5a8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst TitleStyle = styled.p`\n  font-weight: bold;\n  font-size: 2rem;\n\n  color: var(--color-teamif);\n\n  background-size: 0% 100%;\n  background-repeat: no-repeat;\n  transition: background-size 0.2s ease-in;\n  background-image: linear-gradient(transparent 80%, #000 20%);\n  \n  cursor: pointer;\n\n  &:hover {\n    background-size: 100% 100%;\n  }\n`;\n\nconst NavTitle: React.FC = ({ children }) => {\n  return <TitleStyle>{children}</TitleStyle>;\n};\n\nexport default NavTitle;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ItemStyle = styled.p`\n  display: flex;\n  align-self: center;\n  font-weight: bold;\n  font-size: 1.4rem;\n\n  color: black;\n\n  background-size: 0 100%;\n  background-repeat: no-repeat;\n  transition: background-size 0.2s ease-in;\n  background-image: linear-gradient(transparent 80%, var(--color-teamif) 20%);\n\n  margin: 0 2rem;\n  cursor: pointer;\n\n  &:hover {\n    background-size: 100% 100%;\n  }\n`;\n\nconst NavItem: React.FC = ({ children }) => {\n  return <ItemStyle>{children}</ItemStyle>;\n};\n\nexport default NavItem;\n","import React from 'react';\nimport styled from 'styled-components';\nimport NavTitle from './NavTitle';\nimport NavItem from './NavItem';\n\nconst NavContainer = styled.nav`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n\n  width: 75vw;\n  margin: 1rem auto;\n`;\n\nconst NavItemListStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst NavigationBar: React.FC = () => {\n  return (\n    <NavContainer>\n      <NavTitle>\n        <a href=\"/\">TeamIF</a>\n      </NavTitle>\n\n      <NavItemListStyle>\n        <NavItem>\n          <a href=\"#about\">About</a>\n        </NavItem>\n        <NavItem>\n          <a href=\"#project\">Project</a>\n        </NavItem>\n        <NavItem>\n          <a href=\"#member\">Member</a>\n        </NavItem>\n        <NavItem>\n          <a href=\"#recruit\">Recruit</a>\n        </NavItem>\n      </NavItemListStyle>\n    </NavContainer>\n  );\n};\n\nexport default NavigationBar;\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n  margin-top: 2rem;\n  border: none;\n\n  background-color: #333333;\n  color: white;\n\n  width: 120px;\n  height: 40px;\n  border-radius: 50px;\n\n  cursor: pointer;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: var(--color-teamif);\n    color: white;\n  }\n`;\n\nexport default Button;","import styled from 'styled-components';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const Heading1 = styled.p`\n  font-size: 2rem;\n  font-weight: bold;\n`;\n","import styled from 'styled-components';\n\nconst AlignContainer = styled.div`\n  width: 1500px;\n  margin: 0 auto;\n`;\n\nexport default AlignContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../../../atomics/Button';\nimport { Heading1 } from '../../../atomics/Typography/Heading';\nimport AlignContainer from '../../../utils/AlignContainer';\n\nconst Container = styled.section`\n  height: 26rem;\n  background-color: #f1f6ff;\n\n  display: flex;\n  align-items: center;\n`;\n\nconst SubTitleStyle = styled.p`\n  font-size: 1.3rem;\n`;\n\nconst About: React.FC = () => {\n  return (\n    <Container id=\"about\">\n      <AlignContainer>\n        <Heading1>We Make IF to Reality, Dream to Action.</Heading1>\n        <SubTitleStyle>청소년 프로그래머 팀, TeamIF</SubTitleStyle>\n\n        <Button>지원하기</Button>\n      </AlignContainer>\n    </Container>\n  );\n};\n\nexport default About;\n","import React from 'react';\nimport NavigationBar from '../components/NavigationBar';\nimport About from '../components/Sections/About';\n\nconst Home: React.FC = () => {\n  return (\n    <>\n      <NavigationBar />\n      <About />\n    </>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './views/Home';\n\nimport './styles/global.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}