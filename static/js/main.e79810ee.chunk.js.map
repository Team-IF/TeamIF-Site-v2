{"version":3,"sources":["assets/background.jpg","serviceWorker.ts","components/NavigationBar/NavTitle.tsx","components/NavigationBar/NavItem.tsx","utils/ScreenSize/index.tsx","components/NavigationBar/index.tsx","atomics/Button/index.tsx","atomics/Typography/Heading.tsx","utils/AlignContainer/index.tsx","components/Sections/About/index.tsx","components/ProjectCard/index.tsx","components/Sections/Project/index.tsx","components/MemberCard/index.tsx","components/Sections/Member/index.tsx","pages/Home.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TitleStyle","styled","p","NavTitle","children","ItemStyle","NavItem","SCREEN_SIZE","TABLET","MOBILE","NavContainer","nav","NavItemListStyle","div","NavigationBar","href","Button","button","Heading1","AlignContainer","Container","section","background","SubTitleStyle","ButtonStyle","About","id","Card","CardTitle","h1","ProjectCard","title","github","target","rel","icon","faGithub","CardList","Project","ProjectData","map","project","key","name","description","props","color","MemberCard","email","nickname","src","md5","alt","MemberList","Member","MemberData","member","Home","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e79810ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.03b80c14.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst TitleStyle = styled.p`\n  font-weight: bold;\n  font-size: 2rem;\n\n  color: var(--color-teamif);\n\n  background-size: 0% 100%;\n  background-repeat: no-repeat;\n  transition: background-size 0.2s ease-in;\n  background-image: linear-gradient(transparent 80%, #000 20%);\n\n  cursor: pointer;\n\n  &:hover {\n    background-size: 100% 100%;\n  }\n`;\n\nconst NavTitle: React.FC = ({ children }) => {\n  return <TitleStyle>{children}</TitleStyle>;\n};\n\nexport default NavTitle;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ItemStyle = styled.p`\n  display: flex;\n  align-self: center;\n  font-weight: bold;\n  font-size: 1.4rem;\n\n  color: black;\n\n  background-size: 0 100%;\n  background-repeat: no-repeat;\n  transition: background-size 0.2s ease-in;\n  background-image: linear-gradient(transparent 80%, var(--color-teamif) 20%);\n\n  margin: 0 2rem;\n  cursor: pointer;\n\n  &:hover {\n    background-size: 100% 100%;\n  }\n`;\n\nconst NavItem: React.FC = ({ children }) => {\n  return <ItemStyle>{children}</ItemStyle>;\n};\n\nexport default NavItem;\n","const SCREEN_SIZE = {\n  TABLET: '900px',\n  MOBILE: '480px',\n};\n\nexport default SCREEN_SIZE;\n","import React from 'react';\nimport styled from 'styled-components';\nimport NavTitle from './NavTitle';\nimport NavItem from './NavItem';\nimport SCREEN_SIZE from '../../utils/ScreenSize';\n\nconst NavContainer = styled.nav`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n\n  width: 75vw;\n  margin: 1rem auto;\n\n  @media screen and (max-width: ${SCREEN_SIZE.TABLET}) {\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nconst NavItemListStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n\n  @media screen and (max-width: ${SCREEN_SIZE.TABLET}) {\n    display: none;\n  }\n`;\n\nconst NavigationBar: React.FC = () => {\n  return (\n    <NavContainer>\n      <NavTitle>\n        <a href=\"/\">TeamIF</a>\n      </NavTitle>\n\n      <NavItemListStyle>\n        <NavItem>\n          <a href=\"#project\">Project</a>\n        </NavItem>\n        <NavItem>\n          <a href=\"#member\">Member</a>\n        </NavItem>\n        <NavItem>\n          <a href=\"#recruit\">Recruit</a>\n        </NavItem>\n      </NavItemListStyle>\n    </NavContainer>\n  );\n};\n\nexport default NavigationBar;\n","import styled from 'styled-components';\n\nconst Button = styled.button`\n  margin-top: 2rem;\n  border: none;\n\n  background-color: #333333;\n  color: white;\n\n  width: 100px;\n  height: 40px;\n  border-radius: 50px;\n\n  cursor: pointer;\n  transition: background-color 0.2s ease-in-out;\n\n  &:hover {\n    background-color: var(--color-teamif);\n    color: white;\n  }\n`;\n\nexport default Button;\n","import styled from 'styled-components';\nimport SCREEN_SIZE from '../../utils/ScreenSize';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const Heading1 = styled.p`\n  font-size: 2rem;\n  font-weight: bold;\n\n  @media screen and (max-width: ${SCREEN_SIZE.MOBILE}) {\n    font-size: 1.6rem;\n  }\n`;\n","import styled from 'styled-components';\n\nconst AlignContainer = styled.div`\n  padding: 0 1.2rem;\n  \n  width: 1500px;\n  margin: 0 auto;\n`;\n\nexport default AlignContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../../../atomics/Button';\nimport { Heading1 } from '../../../atomics/Typography/Heading';\nimport AlignContainer from '../../../utils/AlignContainer';\n\nimport background from '../../../assets/background.jpg';\n\nconst Container = styled.section`\n  height: 26rem;\n\n  background-image: url(${background});\n  background-size: cover;\n\n  display: flex;\n  align-items: center;\n\n  color: white;\n`;\n\nconst SubTitleStyle = styled.p`\n  font-size: 1.3rem;\n`;\n\nconst ButtonStyle = styled(Button)`\n  background-color: white;\n  color: black;\n`;\n\nconst About: React.FC = () => {\n  return (\n    <Container id=\"about\">\n      <AlignContainer>\n        <Heading1>We Make IF to Reality, Dream to Action.</Heading1>\n        <SubTitleStyle>청소년 프로그래머 팀, TeamIF</SubTitleStyle>\n\n        <ButtonStyle>지원하기</ButtonStyle>\n      </AlignContainer>\n    </Container>\n  );\n};\n\nexport default About;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport Button from '../../atomics/Button';\nimport SCREEN_SIZE from '../../utils/ScreenSize';\n\nconst Card = styled.div`\n  border: 1px solid #eaeaea;\n  border-radius: 20px;\n  box-shadow: 0 0 30px rgba(169, 169, 169, 0.2);\n\n  padding: 1.5rem;\n\n  display: grid;\n  grid-template-rows: auto 80px;\n`;\n\nconst CardTitle = styled.h1`\n  font-size: 1.5rem;\n  font-weight: bold;\n\n  @media screen and (max-width: ${SCREEN_SIZE.MOBILE}) {\n    font-size: 1.3rem;\n  }\n`;\n\ninterface ProjectCardProps {\n  readonly title: string;\n  readonly github: string;\n}\n\nconst ProjectCard: React.FC<ProjectCardProps> = ({ title, github, children }) => {\n  return (\n    <Card>\n      <div>\n        <CardTitle>{title}</CardTitle>\n        <p>{children}</p>\n      </div>\n      <div>\n        <a href={github} target=\"_blank\" rel=\"noopener noreferrer\">\n          <Button>\n            <FontAwesomeIcon icon={faGithub} /> GitHub\n          </Button>\n        </a>\n      </div>\n    </Card>\n  );\n};\n\nexport default ProjectCard;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Heading1 } from '../../../atomics/Typography/Heading';\nimport AlignContainer from '../../../utils/AlignContainer';\nimport ProjectCard from '../../ProjectCard';\nimport ProjectData from '../../../data/project.data.json';\n\nconst Container = styled.section`\n  display: flex;\n  align-items: center;\n`;\n\nconst TitleStyle = styled(Heading1)`\n  margin: 2rem 0;\n`;\n\nconst CardList = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-gap: 40px;\n`;\n\nconst Project: React.FC = () => {\n  return (\n    <Container id=\"project\">\n      <AlignContainer>\n        <TitleStyle>Project.</TitleStyle>\n\n        <CardList>\n          {ProjectData.map((project) => (\n            <ProjectCard key={project.name} title={project.name} github={project.github}>\n              {project.description}\n            </ProjectCard>\n          ))}\n        </CardList>\n      </AlignContainer>\n    </Container>\n  );\n};\n\nexport default Project;\n","import React from 'react';\nimport styled from 'styled-components';\nimport md5 from 'md5';\n\nconst Card = styled.div<{ color: string }>`\n  display: flex;\n  flex-direction: row;\n\n  background-color: ${(props) => props.color};\n  color: white;\n\n  line-height: 40px;\n\n  border-radius: 20px;\n\n  & > img {\n    width: 40px;\n    height: 40px;\n    border-radius: 20px;\n  }\n\n  & > p {\n    padding-left: 0.5rem;\n    padding-right: 1rem;\n    font-size: 12px;\n  }\n\n  flex: 0 1;\n  margin-bottom: 10px;\n  margin-right: 15px;\n\n  &:last-child {\n    margin-right: 0;\n  }\n`;\n\ninterface MemberCardProps {\n  readonly email: string;\n  readonly nickname: string;\n  readonly color: string;\n}\n\nconst MemberCard: React.FC<MemberCardProps> = ({ email, nickname, color }) => {\n  return (\n    <Card color={color}>\n      <img\n        src={`https://www.gravatar.com/avatar/${md5(\n          email\n        )}?s=1024&d=https%3A%2F%2Fteamif%2Eio%2Fdefault_profile%2Epng`}\n        alt=\"profile\"\n      />\n      <p>{nickname}</p>\n    </Card>\n  );\n};\n\nexport default MemberCard;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Heading1 } from '../../../atomics/Typography/Heading';\nimport AlignContainer from '../../../utils/AlignContainer';\nimport MemberCard from '../../MemberCard';\n\nimport MemberData from '../../../data/member.data.json';\n\nconst Container = styled.section`\n  display: flex;\n  align-items: center;\n`;\n\nconst TitleStyle = styled(Heading1)`\n  margin: 2rem 0;\n`;\n\nconst MemberList = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`;\n\nconst Member: React.FC = () => {\n  return (\n    <Container id=\"member\">\n      <AlignContainer>\n        <TitleStyle>Member.</TitleStyle>\n        <MemberList>\n          {MemberData.map((member) => (\n            <MemberCard\n              key={member.nickname}\n              email={member.email}\n              nickname={member.nickname}\n              color={member.color}\n            />\n          ))}\n        </MemberList>\n      </AlignContainer>\n    </Container>\n  );\n};\n\nexport default Member;\n","import React from 'react';\nimport NavigationBar from '../components/NavigationBar';\nimport About from '../components/Sections/About';\nimport Project from '../components/Sections/Project';\nimport Member from '../components/Sections/Member';\n\nconst Home: React.FC = () => {\n  return (\n    <>\n      <NavigationBar />\n      <About />\n      <Project />\n      <Member />\n    </>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './pages/Home';\n\nimport './styles/global.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}